import { Base } from "@abstracts/client/client.abstract";
import { CmdArg, CmdOpt, CmdType } from "@abstracts/command/command.types";
import { CustomClient } from "@client/custom-client";
import { EmbedBuilder, InteractionType } from "discord.js";

export class BaseCommand<K extends CmdType> extends Base {
  options?: CmdOpt<K>;

  constructor(client: CustomClient) {
    super(client);
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  execute(arg: CmdArg<K>): Promise<unknown> | unknown {
    throw new Error("Cannot be invoked in parent class");
  }

  sendError(error: string, arg: CmdArg<K>, isExpected = true) {
    try {
      const isSlash = arg.type === InteractionType.ApplicationCommand;
      const commandName = isSlash ? arg.commandName : arg.content;

      const embed = new EmbedBuilder()
        .setTitle("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ ‚ùó")
        .setColor("Red")
        .setDescription(`–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:`)
        .addFields([
          {
            name: "–û—à–∏–±–∫–∞ üö®",
            value: `> ${error.slice(0, 1020)}`,
          },
          {
            name: "–ö–æ–º–∞–Ω–¥–∞ üìú",
            value: `> ${commandName} ${
              (isSlash && arg.options.getSubcommand(false)) || ""
            }`,
          },
        ]);

      if (!isExpected) {
        embed.setFooter({
          text: "–≠—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞! üò±\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º",
        });
      }

      const reply = {
        content: "",
        embeds: [embed],
        components: [],
      };

      if (!isSlash) {
        return arg.reply(reply);
      }

      if (arg.deferred) {
        return arg.editReply(reply);
      } else if (arg.replied) {
        return arg.followUp({ ...reply, ephemeral: true });
      } else {
        return arg.reply({ ...reply, ephemeral: true });
      }
    } catch (err) {
      console.log(err);
    }
  }

  sendSuccess(message: string, arg: CmdArg<K>, isEphemeral = true) {
    const isSlash = arg.type === InteractionType.ApplicationCommand;
    const embed = new EmbedBuilder()
      .setTitle("–£—Å–ø–µ—à–Ω–æ! ‚úÖ")
      .setColor("Green")
      .setDescription(message.slice(0, 1023));

    const reply = {
      content: "",
      embeds: [embed],
      components: [],
    };

    if (!isSlash) {
      return arg.reply(reply);
    }

    if (arg.deferred) {
      return arg.editReply(reply);
    } else if (arg.replied) {
      return arg.followUp({ ...reply, ephemeral: isEphemeral });
    } else {
      return arg.reply({ ...reply, ephemeral: isEphemeral });
    }
  }
}
