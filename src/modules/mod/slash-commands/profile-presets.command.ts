import { BaseCommand } from "@abstracts/command/command.abstract";
import { CmdArg, CmdType } from "@abstracts/command/command.types";
import { ProfileCommandSubCommandsTypes } from "@app/common/types/commands.types";
import { SlashCommand } from "@decorators/commands.decorator";
import { ProfilePresetEntity } from "@entities/user/profile-preset.entity";
import {
  NavigationButtons,
  GetNavigationSetup,
} from "@helpers/navigation.helper";
import PaginationHelper from "@helpers/pagination.helper";
import {
  ActionRowBuilder,
  ButtonBuilder,
  ComponentType,
  EmbedBuilder,
  GuildMember,
  SlashCommandBuilder,
  resolveColor,
} from "discord.js";
import { IsValidJson } from "@utils/json-validator.util";
import { ParsePresetTokens } from "@utils/embed-parser.util";
import { GatherProfileTokens } from "@utils/gather-tokens.util";
import { userService } from "@app/services/user.service";

@SlashCommand({
  name: "profile-preset",
  description: "–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏—è —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤",
  data: new SlashCommandBuilder()
    .addSubcommand((sub) =>
      sub
        .setName(ProfileCommandSubCommandsTypes.CREATE)
        .setDescription("–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç")
        .addStringOption((opt) =>
          opt
            .setName("json")
            .setDescription(
              "–í–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞"
            )
            .setRequired(true)
        )
    )
    .addSubcommand((sub) =>
      sub
        .setName(ProfileCommandSubCommandsTypes.UPDATE)
        .setDescription("–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç")
        .addStringOption((opt) =>
          opt.setName("id").setDescription("–ê–π–¥–∏ –ø—Ä–µ—Å–µ—Ç–∞").setRequired(true)
        )
        .addStringOption((opt) =>
          opt
            .setName("json")
            .setDescription(
              "–í–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞"
            )
            .setRequired(true)
        )
    )
    .addSubcommand((sub) =>
      sub
        .setName(ProfileCommandSubCommandsTypes.DELETE)
        .setDescription("–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç")
        .addStringOption((opt) =>
          opt.setName("id").setDescription("–ê–π–¥–∏ –ø—Ä–µ—Å–µ—Ç–∞").setRequired(true)
        )
    )
    .addSubcommand((sub) =>
      sub
        .setName(ProfileCommandSubCommandsTypes.LIST)
        .setDescription("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤")
    )
    .addSubcommand((sub) =>
      sub
        .setName(ProfileCommandSubCommandsTypes.INFO)
        .setDescription("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–µ—Å–µ—Ç–æ–≤")
    ),
})
export class ProfilePresetsCommand extends BaseCommand<CmdType.SLASH_COMMAND> {
  async execute(arg: CmdArg<CmdType.SLASH_COMMAND>) {
    const subCommandName = arg.options.getSubcommand(true);

    await arg.deferReply({ ephemeral: true });

    const { CREATE, UPDATE, DELETE, LIST, INFO } =
      ProfileCommandSubCommandsTypes;

    switch (subCommandName) {
      case CREATE:
        return this.createPreset(arg);
      case UPDATE:
        return this.updatePreset(arg);
      case DELETE:
        return this.deletePreset(arg);
      case LIST:
        return this.listPresets(arg);
      case INFO:
        return this.infoPreset(arg);
    }
  }

  // Possible to use this method for custom presets (for users)
  public async createPreset(
    arg: CmdArg<CmdType.SLASH_COMMAND>,
    isCustom = false
  ) {
    const json = arg.options.getString("json", true);

    if (!IsValidJson(json)) {
      return this.sendError("JSON –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω", arg);
    }

    const parsedJson = JSON.parse(json);

    // TODO: Add more checks for other fields (should create a helper for that)
    // src: https://discordjs.guide/popular-topics/embeds.html#embed-limits
    if (!parsedJson.title && !parsedJson.description && !parsedJson.fields) {
      return this.sendError(
        "JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å title, description –∏–ª–∏ fields",
        arg
      );
    }

    // If color is a string, try to resolve it to number
    if (parsedJson.color && typeof parsedJson.color !== "number") {
      try {
        parsedJson.color = resolveColor(parsedJson.color);
      } catch (err) {
        parsedJson.color = 0x2f3136; // Default color
      }
    }

    const data = {
      updated_by: arg.user.id,
      json: JSON.stringify(parsedJson),
    };

    if (isCustom) {
      await ProfilePresetEntity.save({ user: { uid: arg.user.id }, ...data });
    } else {
      await ProfilePresetEntity.save({ ...data });
    }

    return this.sendSuccess("–ü—Ä–µ—Å–µ—Ç —Å–æ–∑–¥–∞–Ω!", arg);
  }

  public async updatePreset(arg: CmdArg<CmdType.SLASH_COMMAND>) {
    const id = arg.options.getString("id", true);
    const json = arg.options.getString("json", true);

    if (!id.match(/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/)) {
      return this.sendError("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID", arg);
    }

    const foundPreset = await ProfilePresetEntity.findOne({ where: { id } });

    if (!foundPreset) {
      return this.sendError("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–µ—Å–µ—Ç –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É ID", arg);
    }

    if (!IsValidJson(json)) {
      return this.sendError("JSON –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω", arg);
    }

    await ProfilePresetEntity.save({
      ...foundPreset,
      json: JSON.stringify(JSON.parse(json)), // Normalize JSON for storing in db (remove spaces etc.)
    });

    return this.sendSuccess("Preset updated!", arg);
  }

  public async deletePreset(arg: CmdArg<CmdType.SLASH_COMMAND>) {
    const id = arg.options.getString("id", true);

    if (!id.match(/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/)) {
      return this.sendError("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID", arg);
    }

    const foundPreset = await ProfilePresetEntity.findOne({ where: { id } });

    if (!foundPreset) {
      return this.sendError("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–µ—Å–µ—Ç –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É ID", arg);
    }

    await ProfilePresetEntity.remove(foundPreset);

    return this.sendSuccess("–ü—Ä–µ—Å–µ—Ç —É–¥–∞–ª—ë–Ω!", arg);
  }

  public async listPresets(interaction: CmdArg<CmdType.SLASH_COMMAND>) {
    const presets = await ProfilePresetEntity.find();

    const { list } = GetNavigationSetup();
    const actionRow = new ActionRowBuilder<ButtonBuilder>().addComponents(list);

    if (!presets.length) {
      return this.sendError(
        "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è",
        interaction
      );
    }

    const paginationHelper = new PaginationHelper(presets, {
      elementsOnPage: 1,
    });

    const [firstPreset] = paginationHelper.createPage();

    const componentCollector =
      interaction.channel?.createMessageComponentCollector({
        componentType: ComponentType.Button,
        filter: (int) =>
          int.user.id === interaction.user.id &&
          int.message.interaction?.id === interaction.id,
        time: 5 * 60000, // 5 minutes
      });

    const userData = await userService.findOneByIdOrCreate(
      interaction.user.id,
      {
        inventory: true,
        wallet: true,
        profile_presets: true,
        selected_preset: true,
      }
    );

    const { tokens } = GatherProfileTokens(
      userData,
      interaction.member as GuildMember,
      this.client.voiceManager
    );

    await interaction.editReply({
      content: this.createContent(firstPreset, paginationHelper),
      embeds: [ParsePresetTokens(tokens, firstPreset)],
      components: [actionRow],
    });

    return componentCollector?.on("collect", (int) => {
      let preset: ProfilePresetEntity | undefined;

      switch (int.customId) {
        case NavigationButtons.TO_LEFT:
          preset = paginationHelper.prevPage().createPage()[0];
          break;
        case NavigationButtons.TO_RIGHT:
          preset = paginationHelper.nextPage().createPage()[0];
          break;
        case NavigationButtons.TO_STOP:
          componentCollector.stop();
          interaction.deleteReply();
          return;
      }

      if (!preset) {
        return;
      }

      int.update({
        content: this.createContent(preset, paginationHelper),
        embeds: [ParsePresetTokens(tokens, preset)],
      });
    });
  }

  public async infoPreset(arg: CmdArg<CmdType.SLASH_COMMAND>) {
    const embed = new EmbedBuilder()
      .setTitle("üìÇ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ—Å–µ—Ç–∞—Ö")
      .setDescription(
        "–ù–∏–∂–µ —É–∫–∞–∑–∞–Ω—ã FAQ –ø–æ –ø—Ä–µ—Å–µ—Ç–∞–º. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
      )
      .addFields([
        {
          name: " ",
          value:
            "–ü—Ä–µ—Å–µ—Ç—ã - —ç—Ç–æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è.",
        },
        {
          name: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç?",
          value:
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∞–π—Ç –¥–ª—è –≥–µ—Ä–µ–Ω–∞—Ü–∏–∏ embed-–æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä [Discord Embed Creator](https://embed.dan.onl/), –∏ —ç—Å–∫–æ—Ä—Ç–∏—Ä—É–π—Ç–µ JSON-–æ–±—ä–µ–∫—Ç –≤ –∫–æ–º–∞–Ω–¥—É.\n " +
            '```/profile-preset create json: {"title":"My Profile","description":"Hello, world!"}```',
        },
        {
          name: "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤?",
          value:
            "–° –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/profile-preset list` –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö ID.",
        },
        {
          name: "–ö–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç?",
          value:
            "–ö–æ–º–∞–Ω–¥–∞ `/profile-preset update id:uuid json:object` –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç –ø–æ –µ–≥–æ ID.",
        },
        {
          name: "–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç?",
          value:
            "–ö–æ–º–∞–Ω–¥–∞ `/profile-preset delete id:uuid` —É–¥–∞–ª–∏—Ç –ø—Ä–µ—Å–µ—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
        },
      ])
      .setImage("https://i.imgur.com/Ut7zM46.png");

    return arg.editReply({ embeds: [embed] });
  }

  public createContent(
    preset: ProfilePresetEntity,
    paginationHelper: PaginationHelper<ProfilePresetEntity>
  ) {
    return (
      `### üìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: [${paginationHelper.page} | ${paginationHelper.totalPages}]\n` +
      `ID –≤ –±–¥: \`\`${preset.id}\`\`\n` +
      `–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä: <@${preset.updated_by}>\n` +
      `–°–æ–∑–¥–∞–Ω: <t:${Math.floor(preset.created_at.getTime() / 1000)}:R>\n` +
      `–û–±–Ω–æ–≤–ª—ë–Ω: <t:${Math.floor(preset.created_at.getTime() / 1000)}:R>\n`
    );
  }
}
