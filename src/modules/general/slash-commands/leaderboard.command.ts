import { BaseCommand } from "@abstracts/command/command.abstract";
import { CmdArg, CmdType } from "@abstracts/command/command.types";
import { userService } from "@app/services/user.service";
import { walletService } from "@app/services/wallet.service";
import { SlashCommand } from "@decorators/commands.decorator";
import { WalletEntity } from "@entities/index";
import { GetDuration } from "@utils/get-duration.util";
import { EmbedBuilder, SlashCommandBuilder } from "discord.js";

@SlashCommand({
  name: "leaderboard",
  description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
  data: new SlashCommandBuilder().addStringOption((opt) =>
    opt
      .setName("category")
      .setDescription("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
      .setRequired(true)
      .addChoices(
        {
          name: "–û–ø—ã—Ç –≤ –≤–æ–π—Å–µ üéôÔ∏è",
          value: "voice_exp",
        },
        {
          name: "–û–ø—ã—Ç –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π üìù",
          value: "message_exp",
        },
        {
          name: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π üìù",
          value: "messages_sent",
        },
        {
          name: "–í—Ä–µ–º—è –≤ –≤–æ–π—Å–∞—Ö üéôÔ∏è",
          value: "voice_time",
        },
        {
          name: "–ë–∞–ª–∞–Ω—Å üí∏",
          value: "balance",
        },
        {
          name: "–í–æ–π—Å –±–∞–ª–∞–Ω—Å üéôÔ∏èü™ô",
          value: "voice_balance",
        }
      )
  ),
})
export class LeaderboardCommand extends BaseCommand<CmdType.SLASH_COMMAND> {
  topLists = {
    voice_exp: {
      title: "–æ–ø—ã—Ç—É –≤ –≤–æ–π—Å–µ üéôÔ∏è",
      data: async () => await userService.usersWithHighest("voice_exp", 5),
    },
    message_exp: {
      title: "–æ–ø—ã—Ç—É –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π üìù",
      data: async () => await userService.usersWithHighest("message_exp", 5),
    },
    messages_sent: {
      title: "–∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π üìù",
      data: async () => await userService.usersWithHighest("messages_sent", 5),
    },
    voice_time: {
      title: "–≤—Ä–µ–º–µ–Ω–∏ –≤ –≤–æ–π—Å–µ üéôÔ∏è",
      data: async () => await userService.usersWithHighest("voice_time", 5),
    },
    balance: {
      title: "–±–∞–ª–∞–Ω—Å—É üí∏",
      data: async () =>
        await walletService.walletWithHighest("balance", 5, {
          user: true,
        }),
    },
    voice_balance: {
      title: "–≤–æ–π—Å –±–∞–ª–∞–Ω—Å—É üéôÔ∏èü™ô",
      data: async () =>
        await walletService.walletWithHighest("voice_balance", 5, {
          user: true,
        }),
    },
  };

  async execute(interaction: CmdArg<CmdType.SLASH_COMMAND>) {
    await interaction.deferReply();
    const category = interaction.options.getString("category", true);

    const embed = await this.createEmbedForCategory(category);
    interaction.editReply({ embeds: [embed] });
  }

  async createEmbedForCategory(category: string) {
    const emojis = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£.", "5Ô∏è‚É£."];
    const categoryList = this.topLists[category as keyof typeof this.topLists];
    const embed = new EmbedBuilder()
      .setTitle(`üìä –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`)
      .setColor("Blue");

    let description = `–¢–æ–ø 5 –ø–æ ${categoryList?.title}\n\n`;

    const categoryData = await categoryList.data()
    const categoryEntries = categoryData.entries()

    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    for (const [index, user] of categoryEntries) {
      const value = user[category as never] as string | number;

      const username = `<@${
        user instanceof WalletEntity ? user.user.uid : user.uid
      }>`;

      description += `${emojis[index]}  ${username}\n - *${
        category === "voice_time"
          ? GetDuration((value as number) / 1000)
          : value
      }*\n`;
    }

    // TODO: Show user's rank in the leaderboard

    return embed.setDescription(description);
  }
}
