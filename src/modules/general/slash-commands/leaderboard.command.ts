import { BaseCommand } from "@abstracts/command/command.abstract";
import { CmdArg, CmdType } from "@abstracts/command/command.types";
import { userService } from "@app/services/user.service";
import { walletService } from "@app/services/wallet.service";
import { SlashCommand } from "@decorators/commands.decorator";
import { UserEntity, WalletEntity } from "@entities/index";
import { GetDuration } from "@utils/get-duration.util";
import { EmbedBuilder } from "discord.js";

@SlashCommand({
  name: "leaderboard",
  description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
})
export class LeaderboardCommand extends BaseCommand<CmdType.SLASH_COMMAND> {
  async execute(interaction: CmdArg<CmdType.SLASH_COMMAND>) {
    await interaction.deferReply();

    const topLists = [
      {
        name: "voice_time" as keyof UserEntity,
        title: "–í—Ä–µ–º—è –≤ –≤–æ–π—Å–∞—Ö üéôÔ∏è",
        data: await userService.usersWithHighest("voice_time", 5),
      },
      {
        name: "balance" as keyof WalletEntity,
        title: "–ë–∞–ª–∞–Ω—Å—É üí∏",
        data: await walletService.walletWithHighest("balance", 5),
      },
      {
        name: "voice_balance" as keyof WalletEntity,
        title: "–í–æ–π—Å –±–∞–ª–∞–Ω—Å üéôÔ∏èü™ô",
        data: await walletService.walletWithHighest("voice_balance", 5),
      },
    ];

    const leaderboardEmbed = new EmbedBuilder()
      .setTitle("–¢–æ–ø 3 –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º üèÜ")
      .setDescription(
        "–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã —Å–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ! üöÄ"
      )
      .setColor("Yellow")
      .setImage("https://i.imgur.com/t9BQoBE.png");

    for (const list of topLists) {
      let users = "";

      for (const [index, user] of list.data.entries()) {
        let username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        let value = user[list.name as never] as string | number;

        if (user instanceof WalletEntity) {
          username = await this.getUsernameFromId(user.userUid);
        } else {
          username = await this.getUsernameFromId(user.uid);
        }

        if (typeof value === "number" && list.name === "voice_time") {
          value = GetDuration(value);
        }

        const emojis = ["ü•á", "ü•à", "ü•â", "4.", "5."];

        users += `${emojis[index]} ${username}\n - *${value}*\n`;
      }

      leaderboardEmbed.addFields({
        name: list.title,
        value: users,
        inline: true,
      });
    }

    interaction.editReply({ embeds: [leaderboardEmbed] });
  }

  async getUsernameFromId(id: string) {
    return (await this.client.users.fetch(id))?.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  }
}
