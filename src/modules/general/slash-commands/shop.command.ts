import { BaseCommand } from "@abstracts/command/command.abstract";
import { CmdArg, CmdType } from "@abstracts/command/command.types";
import { userService } from "@app/services/user.service";
import { SlashCommand } from "@decorators/commands.decorator";
import { ProfilePresetEntity, UserEntity } from "@entities/index";
import {
  GetNavigationSetup,
  NavigationButtons,
} from "@helpers/navigation.helper";
import PaginationHelper from "@helpers/pagination.helper";
import {
  CreatePreviewPresetText,
  ParsePresetTokens,
} from "@utils/embed-parser.util";
import { GatherProfileTokens } from "@utils/gather-tokens.util";
import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ComponentType,
  GuildMember,
  SlashCommandBuilder,
  StringSelectMenuBuilder,
  StringSelectMenuInteraction,
} from "discord.js";

enum SHOP_CATEGORIES {
  ROLES = "roles",
  PROFILES = "profiles",
  SERVICES = "services",
}

const TO_PROCEED = "to-proceed-button";

@SlashCommand({
  name: "shop",
  description: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞",
  data: new SlashCommandBuilder(),
})
export class ShopCommand extends BaseCommand<CmdType.SLASH_COMMAND> {
  async execute(interaction: CmdArg<CmdType.SLASH_COMMAND>) {
    const { sendError } = this.getMethods(interaction);
    await interaction.deferReply();

    const actionRowCategories =
      new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(
        new StringSelectMenuBuilder()
          .addOptions([
            {
              emoji: { name: "üñºÔ∏è" },
              label: "–ü—Ä–æ—Ñ–∏–ª–∏",
              description: "–ö—É–ø–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è",
              value: SHOP_CATEGORIES.PROFILES,
            },
            // {
            //   emoji: { name: "üîß" },
            //   label: "–£—Å–ª—É–≥–∏",
            //   description: "–ö—É–ø–∏—Ç—å —É—Å–ª—É–≥–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ç.–¥.)",
            //   value: SHOP_CATEGORIES.SERVICES,
            // },
          ])
          .setCustomId("shop-categories")
          .setPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
      );

    interaction.editReply({
      embeds: [shopTitileEmbed],
      components: [actionRowCategories],
    });

    const componentCollector =
      interaction.channel?.createMessageComponentCollector({
        componentType: ComponentType.StringSelect,
        filter: (int) =>
          int.user.id === interaction.user.id &&
          int.message.interaction?.id === interaction.id,
        time: 5 * 60000, // 5 minutes
      });

    componentCollector?.on("collect", async (int) => {
      const category = int.values[0] as SHOP_CATEGORIES;
      componentCollector.stop();

      switch (category) {
        case SHOP_CATEGORIES.PROFILES:
          return this.handleProfilesCategory(int);
        // case SHOP_CATEGORIES.SERVICES:
        //   return this.handleServicesCategory(int);
        default:
          return sendError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è");
      }
    });
  }

  async handleProfilesCategory(arg: StringSelectMenuInteraction) {
    const presets = await ProfilePresetEntity.find({
      order: {
        created_at: "DESC",
      },
    });

    let userData = await userService.findOneByIdOrCreate(arg.user.id, {
      inventory: true,
      wallet: true,
      profile_presets: true,
      selected_preset: true,
    });

    const { list } = GetNavigationSetup();
    const actionRow = new ActionRowBuilder<ButtonBuilder>().addComponents(list);

    const paginationHelper = new PaginationHelper(presets, {
      elementsOnPage: 1,
    });

    const [firstPreset] = paginationHelper.createPage();

    const componentCollector = arg.channel?.createMessageComponentCollector({
      componentType: ComponentType.Button,
      filter: (int) =>
        int.user.id === arg.user.id && int.message.id === arg.message.id,
      time: 10 * 60000, // 10 minutes
    });

    const { tokens } = GatherProfileTokens(
      userData,
      arg.member as GuildMember,
      this.client.voiceManager
    );

    await arg.update({
      content: CreatePreviewPresetText(paginationHelper),
      embeds: [ParsePresetTokens(tokens, firstPreset)],
      components: [actionRow, this.getPresetButtons(firstPreset, userData)],
    });

    componentCollector?.on("collect", async (int) => {
      let preset: ProfilePresetEntity | undefined;

      // Refinding since user data could be changed
      userData = await userService.findOneByIdOrCreate(arg.user.id, {
        inventory: true,
        wallet: true,
        profile_presets: true,
        selected_preset: true,
      });

      switch (int.customId) {
        case NavigationButtons.TO_LEFT:
          preset = paginationHelper.prevPage().createPage()[0];
          break;
        case NavigationButtons.TO_RIGHT:
          preset = paginationHelper.nextPage().createPage()[0];
          break;
        case NavigationButtons.TO_STOP:
          componentCollector.stop();
          return arg.deleteReply();
        case TO_PROCEED:
          preset = paginationHelper.createPage()[0];
          userData.wallet.balance -= 500; // Placeholder price
          userData.selected_preset = [preset];
          userData.profile_presets = [
            ...(userData.profile_presets || []),
            preset,
          ];

          await UserEntity.save(userData);

          componentCollector.stop();
          arg.editReply({
            content: "",
            components: [],
            embeds: [
              {
                title: "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞",
                description: `–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è! üéâ\n\n–Ø —É–∂–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∞ –µ–≥–æ –∫ –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é`,
                color: 0x2f3136,
              },
            ],
          });
      }

      if (!preset) {
        return;
      }

      await int.update({
        content: CreatePreviewPresetText(paginationHelper),
        embeds: [ParsePresetTokens(tokens, preset)],
        components: [actionRow, this.getPresetButtons(preset, userData)],
      });
    });
  }

  async handleServicesCategory(arg: StringSelectMenuInteraction) {
    // TODO: Implement this
    arg.update({
      content: "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..",
      components: [],
      embeds: [],
    });
    return;
  }

  private getPresetButtons(preset: ProfilePresetEntity, userData: UserEntity) {
    const price = 500; // Note: This is a placeholder. You should get the price from the preset entity
    const isUserHasPreset = userData.profile_presets?.some(
      (p) => p.id === preset.id
    );
    const isHasMoney = userData.wallet.balance >= price;

    function getLabel() {
      if (isUserHasPreset) {
        return "–£–∂–µ –∫—É–ø–ª–µ–Ω–æ";
      }

      if (!isHasMoney) {
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤";
      }

      return "–ö—É–ø–∏—Ç—å –ø—Ä–µ—Å–µ—Ç";
    }

    return new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder()
        .setCustomId("disabled-button")
        .setStyle(ButtonStyle.Secondary)
        .setEmoji("ü™ô")
        .setLabel("–¶–µ–Ω–∞ –ø—Ä–µ—Å–µ—Ç–∞: " + price)
        .setDisabled(true),
      new ButtonBuilder()
        .setCustomId(TO_PROCEED)
        .setStyle(
          isUserHasPreset || !isHasMoney
            ? ButtonStyle.Danger
            : ButtonStyle.Success
        )
        .setEmoji(isUserHasPreset || !isHasMoney ? "‚ùó" : "‚úÖ")
        .setLabel(getLabel())
        .setDisabled(isUserHasPreset || !isHasMoney)
    );
  }
}

const shopTitileEmbed = {
  title: "–ú–∞–≥–∞–∑–∏–Ω",
  description:
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! üõí\n–ó–¥–µ—Å—Ç—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Ä–æ–ª–∏, –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ! üõçÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏! ‚¨áÔ∏è",
  image: {
    url: "https://media.discordapp.net/attachments/989319914701586462/1247944373270872074/509000799cb0c5e1272e695a467823a0c81ea119_47x20.png?ex=6661de44&is=66608cc4&hm=4937210ab997b3f31a9495e01eea8a9f56223e27de53478b24d5fd0153c1895f&=&format=webp&quality=lossless&width=550&height=234",
    // Anime image. Replace or comment out if you like being hit by the rock. (I'm joking)
  },
  color: 0x2f3136,
};
