import { BaseCommand } from "@abstracts/command/command.abstract";
import { CmdArg, CmdType } from "@abstracts/command/command.types";
import { userService } from "@app/services/user.service";
import { SlashCommand } from "@decorators/commands.decorator";
import { ProfilePresetEntity, UserEntity } from "@entities/index";
import {
  GetNavigationSetup,
  NavigationButtons,
} from "@helpers/navigation.helper";
import PaginationHelper from "@helpers/pagination.helper";
import {
  CheckIfEmbedIsValid,
  CreatePreviewPresetText,
  ParsePresetTokens,
} from "@utils/embed-parser.util";
import { GatherProfileTokens } from "@utils/gather-tokens.util";
import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonInteraction,
  ButtonStyle,
  ComponentType,
  EmbedBuilder,
  GuildMember,
  ModalBuilder,
  SlashCommandBuilder,
  StringSelectMenuBuilder,
  StringSelectMenuInteraction,
  TextInputBuilder,
  TextInputStyle,
} from "discord.js";

enum SHOP_CATEGORIES {
  PROFILES = "profiles",
  CREATE_PRESET = "create-preset",
}

const TO_PROCEED = "to-proceed-button";

@SlashCommand({
  name: "shop",
  description: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞",
  data: new SlashCommandBuilder(),
})
export class ShopCommand extends BaseCommand<CmdType.SLASH_COMMAND> {
  async execute(interaction: CmdArg<CmdType.SLASH_COMMAND>) {
    const { sendError } = this.getMethods(interaction);
    await interaction.deferReply({ ephemeral: true });

    const actionRowCategories =
      new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(
        new StringSelectMenuBuilder()
          .addOptions([
            {
              emoji: { name: "üñºÔ∏è" },
              label: "–ü—Ä–æ—Ñ–∏–ª–∏",
              description: "–ö—É–ø–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è",
              value: SHOP_CATEGORIES.PROFILES,
            },
            {
              emoji: { name: "üé®" },
              label: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
              description: "–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ—Å–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è",
              value: SHOP_CATEGORIES.CREATE_PRESET,
            },
          ])
          .setCustomId("shop-categories")
          .setPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
      );

    interaction.editReply({
      embeds: [shopTitileEmbed],
      components: [actionRowCategories],
    });

    const componentCollector =
      interaction.channel?.createMessageComponentCollector({
        componentType: ComponentType.StringSelect,
        filter: (int) =>
          int.user.id === interaction.user.id &&
          int.message.interaction?.id === interaction.id,
        time: 5 * 60000, // 5 minutes
      });

    componentCollector?.on("collect", async (int) => {
      const category = int.values[0] as SHOP_CATEGORIES;
      componentCollector.stop();

      switch (category) {
        case SHOP_CATEGORIES.PROFILES:
          return this.handleProfilesCategory(int);
        case SHOP_CATEGORIES.CREATE_PRESET:
          return this.handlePresetCreation(int);
        default:
          return sendError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è");
      }
    });
  }

  async handleProfilesCategory(arg: StringSelectMenuInteraction) {
    const presets = await ProfilePresetEntity.find({
      order: {
        created_at: "DESC",
      },
    });

    let userData = await userService.findOneByIdOrCreate(arg.user.id, {
      inventory: true,
      wallet: true,
      profile_presets: true,
      selected_preset: true,
    });

    const { list } = GetNavigationSetup();
    const actionRow = new ActionRowBuilder<ButtonBuilder>().addComponents(list);

    const paginationHelper = new PaginationHelper(presets, {
      elementsOnPage: 1,
    });

    const [firstPreset] = paginationHelper.createPage();

    const componentCollector = arg.channel?.createMessageComponentCollector({
      componentType: ComponentType.Button,
      filter: (int) =>
        int.user.id === arg.user.id && int.message.id === arg.message.id,
      time: 10 * 60000, // 10 minutes
    });

    const { tokens } = GatherProfileTokens(
      userData,
      arg.member as GuildMember,
      this.client.voiceManager
    );

    await arg.update({
      content: CreatePreviewPresetText(paginationHelper),
      embeds: [ParsePresetTokens(tokens, firstPreset)],
      components: [actionRow, this.getPresetButtons(firstPreset, userData)],
    });

    componentCollector?.on("collect", async (int) => {
      let preset: ProfilePresetEntity | undefined;

      // Refinding since user data could be changed
      userData = await userService.findOneByIdOrCreate(arg.user.id, {
        inventory: true,
        wallet: true,
        profile_presets: true,
        selected_preset: true,
      });

      switch (int.customId) {
        case NavigationButtons.TO_LEFT:
          preset = paginationHelper.prevPage().createPage()[0];
          break;
        case NavigationButtons.TO_RIGHT:
          preset = paginationHelper.nextPage().createPage()[0];
          break;
        case NavigationButtons.TO_STOP:
          componentCollector.stop();
          return arg.deleteReply();
        case TO_PROCEED:
          preset = paginationHelper.createPage()[0];
          userData.wallet.balance -= 500; // Placeholder price
          userData.selected_preset = [preset];
          userData.profile_presets = [
            ...(userData.profile_presets || []),
            preset,
          ];

          await UserEntity.save(userData);

          componentCollector.stop();
          arg.editReply({
            content: "",
            components: [],
            embeds: [
              {
                title: "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞",
                description: `–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è! üéâ\n\n–Ø —É–∂–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∞ –µ–≥–æ –∫ –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é`,
                color: 0x2f3136,
              },
            ],
          });
      }

      if (!preset) {
        return;
      }

      await int.update({
        content: CreatePreviewPresetText(paginationHelper),
        embeds: [ParsePresetTokens(tokens, preset)],
        components: [actionRow, this.getPresetButtons(preset, userData)],
      });
    });
  }

  async handlePresetCreation(arg: StringSelectMenuInteraction) {
    const embed = new EmbedBuilder()
      .setTitle("–í—ã –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç–µ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–µ—Å–µ—Ç–∞ ‚ùó")
      .setDescription(
        "–ù–∏–∂–µ —É–∫–∞–∑–∞–Ω—ã FAQ –ø–æ –ø—Ä–µ—Å–µ—Ç–∞–º. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
      )
      .addFields(
        {
          name: " ",
          value:
            "–ü—Ä–µ—Å–µ—Ç - —ç—Ç–æ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø—Ä–æ—Ñ–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ —Å–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é. –ü—Ä–µ—Å–µ—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –≤ —Å–µ–±–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Å–µ–±—è.",
        },
        {
          name: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç?",
          value:
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∞–π—Ç –¥–ª—è –≥–µ—Ä–µ–Ω–∞—Ü–∏–∏ embed-–æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä [Discord Embed Creator](https://embed.dan.onl/), –∏ —ç—Å–∫–æ—Ä—Ç–∏—Ä—É–π—Ç–µ JSON-–æ–±—ä–µ–∫—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø–æ–ª–µ.\n ",
        },
        {
          name: "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞?",
          value:
            "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ —Å—Ç–æ–∏—Ç **1000** –º–æ–Ω–µ—Ç. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞, –æ–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–µ—Ä–≤–µ—Ä–∞. –í—ã –∂–µ –ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.",
        },
        {
          name: `–ß—Ç–æ —Ç–∞–∫–æ–µ "—Ç–æ–∫–µ–Ω—ã" –∏ –ø–æ—á–µ–º—É –æ–Ω–∏ –≤–∞–∂–Ω—ã?`,
          value:
            "–¢–æ–∫–µ–Ω—ã - —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ–º –ø—Ä–µ—Å–µ—Ç–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, {{user.display_name}} - —ç—Ç–æ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è." +
            "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/profile-tokens`. ",
        },
        {
          name: `–ö–∞–∫–∏–µ —Ç–æ–∫–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã?`,
          value:
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è: `{{user.display_name}}` –∏ `{{user.balance}}`. –ë–µ–∑ –Ω–∏—Ö –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç.",
        }
      );

    const actionRowProceed =
      new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
          .setCustomId("to-proceed-button")
          .setStyle(ButtonStyle.Success)
          .setEmoji("‚úÖ")
          .setLabel("–Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞")
      );

    await arg.update({
      embeds: [embed],
      components: [actionRowProceed],
    });

    const componentCollector = arg.channel?.createMessageComponentCollector({
      componentType: ComponentType.Button,
      filter: (int) =>
        int.user.id === arg.user.id && int.message.id === arg.message.id,
      time: 5 * 60000, // 5 minutes
    });

    componentCollector?.on("collect", async (int) => {
      if (int.customId === TO_PROCEED) {
        componentCollector.stop();
        return this.handlePresetCreationProceed(int);
      }
    });

    return;
  }

  async handlePresetCreationProceed(arg: ButtonInteraction) {
    let userData = await userService.findOneByIdOrCreate(arg.user.id, {
      inventory: true,
      wallet: true,
      profile_presets: true,
      selected_preset: true,
    });

    if (userData.wallet.balance < 1000) {
      arg.update({
        content: "",
        components: [],
        embeds: [
          {
            title: "–û—à–∏–±–∫–∞",
            description: "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞",
            color: 0xff0000,
          },
        ],
      });
      return;
    }

    const modal = new ModalBuilder()
      .setTitle("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞")
      .setCustomId("create-preset-modal");

    const jsonEmbedInput = new TextInputBuilder()
      .setCustomId("json-embed-input")
      .setLabel("–í–≤–µ–¥–∏—Ç–µ JSON-–æ–±—ä–µ–∫—Ç —Å embed-–¥–∞–Ω–Ω—ã–º–∏.")
      .setPlaceholder(
        '{\n  "title": "–ü—Ä–∏–º–µ—Ä",\n  "description": "–ü—Ä–∏–º–µ—Ä",\n  "color": 0x2f3136\n}'
      )
      .setStyle(TextInputStyle.Paragraph);

    modal.addComponents(
      new ActionRowBuilder<TextInputBuilder>().addComponents(jsonEmbedInput)
    );

    await arg.showModal(modal);

    await arg
      .awaitModalSubmit({
        time: 30 * 60000, // 30 minutes
        filter: (int) => int.user.id === arg.user.id,
      })
      .then(async (int) => {
        int.deferUpdate(); // Hide modal

        if (int.customId !== "create-preset-modal") {
          return;
        }

        const jsonString = int.fields.getTextInputValue("json-embed-input");

        const { isValid, error, json } = CheckIfEmbedIsValid(jsonString);
        if (!isValid) {
          return arg.editReply({
            content: "",
            components: [],
            embeds: [
              {
                title: "–û—à–∏–±–∫–∞",
                description: error,
                color: 0xff0000,
              },
            ],
          });
        }

        userData.wallet.balance -= 1000; // Note: Placeholder price, should be taken from the preset entity
        await UserEntity.save(userData);

        await ProfilePresetEntity.save({
          json,
          user: { uid: arg.user.id },
          updated_by: arg.user.id,
        });

        arg.editReply({
          content: "",
          components: [],
          embeds: [
            {
              title: "–£—Å–ø–µ—Ö",
              description:
                "–ü—Ä–µ—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω! üéâ\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `/set-profile`!",
              color: 0x2f3136,
            },
          ],
        });

        return;
      });
  }

  private getPresetButtons(preset: ProfilePresetEntity, userData: UserEntity) {
    const price = 500; // Note: This is a placeholder. You should get the price from the preset entity
    const isUserHasPreset = userData.profile_presets?.some(
      (p) => p.id === preset.id
    );
    const isHasMoney = userData.wallet.balance >= price;

    function getLabel() {
      if (isUserHasPreset) {
        return "–£–∂–µ –∫—É–ø–ª–µ–Ω–æ";
      }

      if (!isHasMoney) {
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤";
      }

      return "–ö—É–ø–∏—Ç—å –ø—Ä–µ—Å–µ—Ç";
    }

    return new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder()
        .setCustomId("disabled-button")
        .setStyle(ButtonStyle.Secondary)
        .setEmoji("ü™ô")
        .setLabel("–¶–µ–Ω–∞ –ø—Ä–µ—Å–µ—Ç–∞: " + price)
        .setDisabled(true),
      new ButtonBuilder()
        .setCustomId(TO_PROCEED)
        .setStyle(
          isUserHasPreset || !isHasMoney
            ? ButtonStyle.Danger
            : ButtonStyle.Success
        )
        .setEmoji(isUserHasPreset || !isHasMoney ? "‚ùó" : "‚úÖ")
        .setLabel(getLabel())
        .setDisabled(isUserHasPreset || !isHasMoney)
    );
  }
}

const shopTitileEmbed = {
  title: "–ú–∞–≥–∞–∑–∏–Ω",
  description:
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! üõí\n–ó–¥–µ—Å—Ç—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Ä–æ–ª–∏, –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ! üõçÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏! ‚¨áÔ∏è",
  image: {
    url: "https://media.discordapp.net/attachments/989319914701586462/1247944373270872074/509000799cb0c5e1272e695a467823a0c81ea119_47x20.png?ex=6661de44&is=66608cc4&hm=4937210ab997b3f31a9495e01eea8a9f56223e27de53478b24d5fd0153c1895f&=&format=webp&quality=lossless&width=550&height=234",
    // Anime image. Replace or comment out if you like being hit by the rock. (I'm joking)
  },
  color: 0x2f3136,
};
