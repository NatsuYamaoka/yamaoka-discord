import { BaseCommand } from "@abstracts/command/command.abstract";
import { CmdArg, CmdType } from "@abstracts/command/command.types";
import { logger } from "@app/core/logger/logger-client";
import { userService } from "@app/services/user.service";
import { SlashCommand } from "@decorators/commands.decorator";
import { ParsePresetTokens } from "@utils/embed-parser.util";
import { GatherProfileTokens } from "@utils/gather-tokens.util";
import { SlashCommandBuilder } from "discord.js";

@SlashCommand({
  name: "profile",
  description: "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
  data: new SlashCommandBuilder().addUserOption((opt) =>
    opt
      .setName("user")
      .setDescription("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è")
      .setRequired(false)
  ),
})
export class ProfileCommand extends BaseCommand<CmdType.SLASH_COMMAND> {
  async execute(interaction: CmdArg<CmdType.SLASH_COMMAND>) {
    const { sendError } = this.getMethods(interaction);
    await interaction.deferReply();

    const userOption = interaction.options.getUser("user") || interaction.user;

    const userData = await userService.findOneByIdOrCreate(userOption.id, {
      inventory: true,
      wallet: true,
      profile_presets: true,
      selected_preset: true,
    });

    const member = interaction.guild?.members.cache.get(userOption.id);
    if (!member) {
      // Since out command is guild only, we can assume that user is a member of the server
      return sendError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞");
    }

    const { tokens } = GatherProfileTokens(
      userData,
      member,
      this.client.voiceManager
    );

    const embed = userData.selected_preset?.[0];

    interaction
      .editReply({ embeds: [ParsePresetTokens(tokens, embed)] })
      .catch((err) => {
        sendError(err.message); // I will be not surprised if users will find a way to make this error, so it's better to handle it
        logger.error(err); // For future investigation
      });
  }
}

export const defaultTemplate = {
  color: 9266629,
  author: {
    name: "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
  },
  title: "{{user.display_name}}",
  thumbnail: {
    url: "{{user.avatar}}",
  },

  fields: [
    {
      name: "üóÇÔ∏è –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
      value:
        "–° –Ω–∞–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å: <t:{{user.joined_server}}:D>\n" +
        "–í –¥–∏—Å–∫–æ—Ä–¥–µ —Å: <t:{{user.joined_discord}}:D>",
      inline: false,
    },
    {
      name: "üì® –°–æ–æ–±—â–µ–Ω–∏—è:",
      value:
        "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: **{{user.messages}}**\n–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞:\n**{{user.message_exp}}** üß™",
      inline: true,
    },
    {
      name: "üéôÔ∏è –í–æ–π—Å-—á–∞—Ç—ã:",
      value:
        "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –≤ –≤–æ–π—Å-—á–∞—Ç–∞—Ö:\n**{{user.voice_time}}**\n–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞:\n**{{user.voice_exp}}** üß™",
      inline: true,
    },
    {
      name: " ",
      value: " ",
      inline: false,
    },
    {
      name: "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:",
      value:
        "- –ü—Ä–æ—Ñ–∏–ª–µ–π: **{{user.profile_presets}}** üñºÔ∏è\n- –ü—Ä–µ–¥–º–µ—Ç–æ–≤: **{{user.inventory_items}}** üì¶",
      inline: true,
    },
    {
      name: "üí∞ –ö–æ—à–µ–ª—ë–∫:",
      value:
        "- –ë–∞–ª–∞–Ω—Å: **{{user.balance}}** üí∏\n- –í–æ–π—Å –±–∞–ª–∞–Ω—Å: **{{user.voice_balance}}** üéôÔ∏èü™ô",
      inline: true,
    },
  ],
  footer: {
    text: "üíú –õ—é–±–∏–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞!",
  },
};
